{"version":3,"sources":["jsengine.js","app.js","util.js","index.js"],"names":["VecUtil","subtract","v1","v2","normal","v","normalize","l","Math","sqrt","pow","dot","collideWithBoundary","width","height","rect","x","vx","y","vy","getRectCenter","project","axis","points","min","max","i","length","point","getPoints","push","getEdges","edges","p1","p2","satCollision","rect1","rect2","minOverlap","Infinity","minAxis","points1","points2","edges1","edges2","edge","mm1","mm2","overlap","mtv","c1c2","applyElastic","damping","dx","dy","dr","nx","ny","tx","ty","dpt1","dpt2","dpn1","dpn2","m1","mass","m2","applyGravity","constant","ax","ay","dsq","force","JSEngine","world_width","world_height","gravity_constant","this","rects","gravity_enabled","collision_enabled","elastic_enabled","sun","id","collision","amount","random","enabled","update","col","RSEngine","randomColor","color","floor","d3Rects","tjRects","App","props","state","controls","elastic","gravity","wasm","sunMass","gravityConstant","fps","d3","animation","stop","bind","start","restart","center","engine","tj","loadWasm","dragGraph","graph","document","getElementById","element","pos","elementDrag","e","window","event","preventDefault","which","clientX","clientY","style","top","offsetTop","left","offsetLeft","closeDragElement","onmouseup","onmousemove","onmousedown","dragElement","Engine","createEngine","children","child","tag","tagName","toLowerCase","parentElement","removeChild","d3Loop","tjLoop","cancelAnimationFrame","createTJEngine","createD3Engine","bb","node","getBoundingClientRect","svg","append","attr","EngineFactory","new","generate","get_rects","camera","three","position","z","scene","renderer","antialias","setSize","appendChild","domElement","geometry","material","mesh","add","value","target","setState","set_sun_mass","set_gravity_constant","set_damping","set_elastic_enabled","set_gravity_enabled","set_collision_enabled","last_fps","performance","now","update_arr","Array","requestAnimationFrame","tick","render","className","onClick","type","onChange","onChangeAmount","step","onChangeSunMass","onChangeGravityConstant","onChangeDamping","checked","onToggleElastic","onToggleGravity","onToggleCollision","renderControls","Component","ReactDOM"],"mappings":"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","file":"static/js/main.ee064321.chunk.js","sourcesContent":["const VecUtil = {\n  subtract: (v1, v2) => [v1[0]-v2[0], v1[1]-v2[1]],\n  normal: v => [-v[1], v[0]],\n  normalize: v => {\n    const l = Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2));\n\t  return [v[0]/l, v[1]/l];\n  },\n  dot: (v1, v2) => v1[0]*v2[0] + v1[1]*v2[1],\n};\n\nfunction collideWithBoundary(width, height, rect) {\n  if (rect.x < 0) {\n    rect.vx = -rect.vx * 0.5;\n    rect.x = 0;\n  }\n  if (rect.y < 0) {\n    rect.vy = -rect.vy * 0.5;\n    rect.y = 0;\n  }\n  if (rect.x+rect.width > width) {\n    rect.vx = -rect.vx * 0.5;\n    rect.x = width-rect.width;\n  }\n  if (rect.y+rect.height > height) {\n    rect.vy = -rect.vy * 0.5;\n    rect.y = height-rect.height;\n  }\n}\n\nfunction getRectCenter(rect) {\n  return [rect.x+rect.width/2, rect.y+rect.height/2];\n}\n\nfunction project(axis, points) {\n  let dot = VecUtil.dot(axis, points[0]);\n  let min = dot; let max = dot;\n  for (let i = 0; i < points.length; i++) {\n    const point = points[i];\n    dot = VecUtil.dot(axis, point);\n    if (dot < min) {\n      min = dot;\n    } else if (dot > max) {\n      max = dot;\n    }\n  }\n  return [min, max];\n}\n\nfunction getPoints(rect) {\n  const points = [];\n  points.push([rect.x, rect.y]);\n  points.push([rect.x, rect.y+rect.height]);\n  points.push([rect.x+rect.width, rect.y+rect.height]);\n  points.push([rect.x+rect.width, rect.y]);\n  return points;\n}\n\nfunction getEdges(points) {\n  const edges = [];\n  for (let i = 0; i < points.length; i++) {\n\t  const p1 = points[i];\n    const p2 = points[i + 1 === points.length ? 0 : i + 1];\n    edges.push(VecUtil.subtract(p1, p2));\n  }\n  return edges;\n}\n\nfunction satCollision(rect1, rect2) {\n  let minOverlap = Infinity;\n  let minAxis = [0, 0];\n  const points1 = getPoints(rect1);\n  const points2 = getPoints(rect2);\n  const edges1 = getEdges(points1);\n  const edges2 = getEdges(points2);\n\n  for (let i = 0; i < edges1.length; i++) {\n    const edge = edges1[i];\n    const axis = VecUtil.normalize(VecUtil.normal(edge));\n    const mm1 = project(axis, points1);\n    const mm2 = project(axis, points2);\n    const overlap = Math.max(0, Math.min(mm1[1], mm2[1]) - Math.max(mm1[0], mm2[0]));\n    if (overlap === 0) {\n      return null;\n    } else if (overlap < minOverlap) {\n      minOverlap = overlap;\n      minAxis = axis;\n    }\n  }\n  for (let i = 0; i < edges2.length; i++) {\n    const edge = edges2[i];\n    const axis = VecUtil.normalize(VecUtil.normal(edge));\n    const mm1 = project(axis, points1);\n    const mm2 = project(axis, points2);\n    const overlap = Math.max(0, Math.min(mm1[1], mm2[1]) - Math.max(mm1[0], mm2[0]));\n    if (overlap === 0) {\n      return null;\n    } else if (overlap < minOverlap) {\n      minOverlap = overlap;\n      minAxis = axis;\n    }\n  }\n\n  const mtv = [minAxis[0]*minOverlap, minAxis[1]*minOverlap];\n  const c1c2 = VecUtil.subtract(getRectCenter(rect1), getRectCenter(rect2));\n  if (VecUtil.dot(minAxis, c1c2) < 0) {\n    return [-mtv[0], -mtv[1]];\n  } \n  return mtv;\n  \n}\n\nfunction applyElastic(rect1, rect2, damping) {\n  const dx = rect2.x - rect1.x;\n  const dy = rect2.y - rect1.y;\n  const dr = Math.sqrt(dx * dx + dy * dy);\n\n  const nx = dx / dr; //normal x\n  const ny = dy / dr; //normal y\n\n  const tx = -ny; //tangent x\n  const ty = nx; //tangent y\n\n  const dpt1 = rect1.vx * tx + rect1.vy * ty; //dot product of tangent\n  const dpt2 = rect2.vx * tx + rect2.vy * ty;\n\n  const dpn1 = rect1.vx * nx + rect1.vy * ny; //dot product of normal\n  const dpn2 = rect2.vx * nx + rect2.vy * ny;\n\n  const m1 = (dpn1 * (rect1.mass - rect2.mass) + 2.0 * rect2.mass * dpn2) / (rect1.mass + rect2.mass); //momentum\n  const m2 = (dpn2 * (rect2.mass - rect1.mass) + 2.0 * rect1.mass * dpn1) / (rect1.mass + rect2.mass);\n\n  rect1.vx = (tx * dpt1 + nx * m1) * damping;\n  rect1.vy = (ty * dpt1 + ny * m1) * damping;\n\n  rect2.vx = (tx * dpt2 + nx * m2) * damping;\n  rect2.vy = (ty * dpt2 + ny * m2) * damping;\n}\n\nfunction applyGravity(rect1, rect2, constant) {\n  let ax = 0;\n  let ay = 0;\n\n  const dx = rect1.x-rect2.x;\n  const dy = rect1.y-rect2.y;\n  const dsq = dx*dx + dy*dy;\n  const dr = Math.sqrt(dsq);\n\n  if (dsq > 5) {\n    const force = (constant*((rect1.mass*rect2.mass)/dsq));\n    ax += force*dx/dr;\n    ay += force*dy/dr;\n  }\n\n  rect1.vx -= ax;\n  rect1.vy -= ay;\n}\n\nexport default class JSEngine {\n\n  constructor(world_width, world_height, gravity_constant, damping) {\n    this.rects = [];\n    this.world_width = world_width;\n    this.world_height = world_height;\n    this.gravity_constant = gravity_constant;\n    this.damping = damping;\n    this.gravity_enabled = true;\n    this.collision_enabled = true;\n    this.elastic_enabled = true;\n    this.sun = {\n      id: 0,\n      collision: false,\n      width: 0.0,\n      height: 0.0,\n      x: world_width / 2.0, \n      y: world_height / 2.0,\n      vx: 0.0, \n      vy: 0.0,\n      ax: 0.0, \n      ay: 0.0,\n      mass: 50.0,\n    };\n  }\n\n  static new(world_width, world_height, gravity_constant, damping) {\n    return new JSEngine(world_width, world_height, gravity_constant, damping);\n  }\n\n  reset() {\n    this.rects = [];\n  }\n\n  generate(amount) {\n    for (let i = 0; i < amount; i++) {\n      const width = 5//Math.random() * 15.0 + 5.0;\n      const height = 5//Math.random() * 15.0 + 5.0;\n      const x = Math.random() * this.world_width;\n      const y = Math.random() * this.world_height;\n      const mass = width*height;\n      let vx = Math.random();\n      let vy = Math.random();\n      if (Math.random() > 0.5) {\n        vx = -vx;\n      }\n      if (Math.random() > 0.5) {\n        vy = -vy;\n      }\n      this.rects.push({\n        id: i,\n        collision: false,\n        width,\n        height,\n        x, \n        y,\n        vx, \n        vy, \n        mass, \n        ax: 0, \n        ay: 0,\n      });\n    }\n  }\n\n  get_rects() {\n    return this.rects;\n  }\n\n  set_damping(damping) {\n    this.damping = damping;\n  }\n\n  set_gravity_enabled(enabled) {\n    this.gravity_enabled = enabled;\n  }\n\n  set_collision_enabled(enabled) {\n    this.collision_enabled = enabled;\n  }\n\n  set_elastic_enabled(enabled) {\n    this.elastic_enabled = enabled;\n  }\n\n  set_gravity_constant(gravity_constant) {\n    this.gravity_constant = gravity_constant;\n  }\n\n  set_sun_mass(mass) {\n    this.sun.mass = mass;\n  }\n\n  tick(update) {\n    for (let i = 0; i < this.rects.length; i++) {\n      const rect = this.rects[i];\n      rect.x += rect.vx;\n      rect.y += rect.vy;\n\n      if (this.gravity_enabled) {\n        applyGravity(rect, this.sun, this.gravity_constant);\n      }\n      \n      for (let x = 0; x < this.rects.length; x++) {\n        const rect2 = this.rects[x];\n\n        if (rect2.id !== rect.id) {\n          if (this.gravity_enabled) {\n            applyGravity(rect, rect2, this.gravity_constant);\n          }\n  \n          if (this.collision_enabled) {\n            const col = satCollision(rect, rect2);\n            if (col !== null) {\n              rect.x += col[0]; rect.y += col[1];\n              rect2.x -= col[0]; rect2.y -= col[1];\n              // eslint-disable-next-line max-depth\n              if (this.elastic_enabled) {\n                applyElastic(rect, rect2, this.damping);\n              }\n            }\n          }\n        }\n      }\n      collideWithBoundary(this.world_width, this.world_height, rect);\n      update[i] = rect;\n    }\n  }\n\n}\n","import React, { Component } from 'react'\nimport * as three from 'three';\nimport * as d3 from 'd3';\nimport { dragElement } from './util';\n\nimport JSEngine from './jsengine';\nimport { timeHours } from 'd3';\nlet RSEngine = null;\n\nfunction randomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nconst d3Rects = {};\nconst tjRects = {};\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rects: [],\n      controls: true,\n      elastic: true,\n      collision: true,\n      gravity: true,\n      wasm: false,\n      amount: 20,\n      sunMass: 0,\n      gravityConstant: 0.0005,\n      damping: 1,\n      fps: 0,\n      d3: true,\n    };\n\n    this.animation = null;\n    this.world_width = null;\n    this.world_height = null;\n    this.sun = null;\n    this.stop = this.stop.bind(this);\n    this.start = this.start.bind(this);\n    this.restart = this.restart.bind(this);\n    this.center = this.center.bind(this);\n    this.engine = null;\n    this.tj = {};\n  }\n\n  componentDidMount() {\n    this.loadWasm();\n    this.dragGraph();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  }\n\n  dragGraph() {\n    const graph = document.getElementById('graph');\n    if (graph) {\n      dragElement(graph);\n    }\n  }\n\n  async loadWasm() {\n    const { Engine } = await import('rust-wasm-sat-pkg');\n    RSEngine = Engine;\n    this.createEngine();\n  }\n\n  restart() {\n    this.stop();\n    this.d3Rects = {};\n    this.tjRects = {};\n    this.tj = {};\n    const graph = document.getElementById('graph');\n    if (graph) {\n      for(const child of graph.children) {\n        const tag = child.tagName.toLowerCase();\n        if (tag === 'svg' || tag === 'canvas') {\n          child.parentElement.removeChild(child);\n        }\n      }\n    }\n    this.createEngine();\n  }\n\n  start() {\n    if (this.animation === null) {\n      if (this.state.d3) {\n        this.d3Loop();\n      } else {\n        this.tjLoop();\n      }\n    } \n  }\n\n  stop() {\n    if (this.animation === null) { return; }\n    window.cancelAnimationFrame(this.animation);\n    this.animation = null;\n  }\n\n  center() {\n    const graph = document.getElementById('graph');\n    if (graph) {\n      graph.style.top = 'calc(-1500px + 50vh)';\n      graph.style.left = 'calc(-1500px + 100vh)';\n    }\n  }\n\n  createEngine() {\n    if (this.state.d3) {\n      this.createD3Engine();\n    } else {\n      return this.createTJEngine();\n    }\n  }\n\n  createD3Engine() {\n    const bb = d3.select(`#graph`).node().getBoundingClientRect();\n    this.world_width = bb.width;\n    this.world_height = bb.height;\n\n    const svg = d3.select('#graph')\n      .append('svg')\n      .attr('id', 'svg')\n      .attr('width', this.world_width)\n      .attr('height', this.world_height);\n\n    this.sun = svg.append('circle')\n      .attr('fill', '#ffee02')\n      .attr('r', 30)\n      .attr('cx', this.world_width/2)\n      .attr('cy', this.world_height/2);\n\n    const EngineFactory = this.state.wasm ? RSEngine : JSEngine;\n    this.engine = EngineFactory.new(\n      this.world_width,\n      this.world_height,\n      this.state.gravityConstant,\n      this.state.damping\n    );\n    this.engine.generate(this.state.amount);\n\n    const rects = this.engine.get_rects();\n\n    for (const rect of rects) {\n      d3Rects[rect.id] = svg.append('rect')\n        .attr('fill', `${randomColor()}`)\n        .attr('width', rect.width)\n        .attr('height', rect.height)\n        .attr('x', rect.x)\n        .attr('y', rect.y);\n    }\n  }\n\n  createTJEngine() {\n    const graph = document.getElementById('graph');\n    const bb = graph.getBoundingClientRect();\n    this.world_width = bb.width;\n    this.world_height = bb.height;\n    this.tj.camera = new three.PerspectiveCamera(75,this.world_width/this.world_height,0.01,10);\n    this.tj.camera.position.z = 1;\n    this.tj.scene = new three.Scene();\n    this.tj.renderer = new three.WebGLRenderer({ antialias: true });\n    this.tj.renderer.setSize( this.world_width, this.world_height );\n    graph.appendChild(this.tj.renderer.domElement);\n\n    const EngineFactory = this.state.wasm ? RSEngine : JSEngine;\n    this.engine = EngineFactory.new(\n      this.world_width,\n      this.world_height,\n      this.state.gravityConstant,\n      this.state.damping\n    );\n    this.engine.generate(this.state.amount);\n\n    const rects = this.engine.get_rects();\n    for (const rect of rects) {\n      const geometry = new three.BoxGeometry( 0.2, 0.2, 0.2 );\n      const material = new three.MeshNormalMaterial({color: 0x00ff00});\n      const mesh = new three.Mesh( geometry, material );\n      tjRects[rect.id] = mesh;\n      this.tj.scene.add(mesh);\n      break;\n    }\n  }\n\n  onChangeAmount(e) {\n    let { value } = e.target;\n    value = value > 0 ? value : 0;\n    this.setState({ amount: value })\n  }\n\n  onChangeSunMass(e) {\n    let { value } = e.target;\n    value = value >= 0 ? value : 0;\n    this.setState({ sunMass: value });\n\n    if (this.engine) {\n      this.engine.set_sun_mass(value);\n    }\n  }\n\n  onChangeGravityConstant(e) {\n    let { value } = e.target;\n    value = value >= 0 ? value : 0;\n    this.setState({gravityConstant: value})\n\n    if (this.engine) {\n      this.engine.set_gravity_constant(value);\n    }\n  }\n\n  onChangeDamping(e) {\n    let { value } = e.target;\n    value = value > 0 ? value : 0;\n    this.setState({damping: value})\n\n    if (this.engine) {\n      this.engine.set_damping(value);\n    }\n  }\n\n  onToggleElastic() {\n    const value = !this.state.elastic;\n    this.setState({elastic: value});\n\n    if (this.engine) {\n      this.engine.set_elastic_enabled(value);\n    }\n  }\n\n  onToggleGravity() {\n    const value = !this.state.gravity;\n    this.setState({gravity: value});\n\n    if (this.engine) {\n      this.engine.set_gravity_enabled(value);\n    }\n  }\n\n  onToggleCollision() {\n    const value = !this.state.collision;\n    this.setState({collision: value});\n\n    if (this.engine) {\n      this.engine.set_collision_enabled(value);\n    }\n  }\n\n  d3Loop() {\n    let fps = 0;\n    let last_fps = performance.now();\n    let update_arr = new Array(this.state.amount);\n\n    const update = () => {\n      this.engine.tick(update_arr);\n      for (const rect of update_arr) {\n        d3Rects[rect.id].attr(\"x\", rect.x).attr(\"y\", rect.y);\n      }\n\n      fps+=1;\n      if (performance.now() - last_fps > 1000) {\n        this.setState({ fps });\n        fps = 0;\n        last_fps = performance.now();\n      }\n\n      this.animation = window.requestAnimationFrame(update);\n    }\n    this.animation = window.requestAnimationFrame(update);\n  }\n\n  tjLoop() {\n    let fps = 0;\n    let last_fps = performance.now();\n    let update_arr = new Array(this.state.amount);\n\n    const update = () => {\n      this.animation = window.requestAnimationFrame(update);\n\n      this.engine.tick(update_arr);\n\n      for (const rect of update_arr) {\n        //tjRects[rect.id].rotation.x = 0.01;\n        //tjRects[rect.id].rotation.y = 0.01;\n      }\n\n      fps+=1;\n      if (performance.now() - last_fps > 1000) {\n        this.setState({ fps });\n        fps = 0;\n        last_fps = performance.now();\n      }\n\n      this.tj.renderer.render(this.tj.scene, this.tj.camera);\n    }\n    this.animation = window.requestAnimationFrame(update);\n  }\n\n  renderControls() {\n    return (\n      <div className=\"controls\">\n        <button onClick={this.start}>\n            Start\n        </button>\n        <button onClick={this.stop}>\n          Stop\n        </button>\n        <button onClick={this.restart}>\n          Restart\n        </button>\n        <button onClick={this.center}>\n          Center\n        </button>\n        <div className=\"check\">\n          <p>Amount</p>\n          <input\n            type=\"number\"\n            style={{width: 100}}\n            value={this.state.amount}\n            onChange={this.onChangeAmount.bind(this)}\n          />\n        </div>\n        <div className=\"check\">\n          <p>Sun Mass</p>\n          <input\n            type=\"number\"\n            style={{width: 100}}\n            step=\"50\"\n            value={this.state.sunMass}\n            onChange={this.onChangeSunMass.bind(this)}\n          />\n        </div>\n        <div className=\"check\">\n          <p>G Constant</p>\n          <input\n            type=\"number\"\n            step=\"0.0001\"\n            style={{width: 100}}\n            value={this.state.gravityConstant}\n            onChange={this.onChangeGravityConstant.bind(this)}\n          />\n        </div>\n        <div className=\"check\">\n          <p>Damping</p>\n          <input\n            type=\"number\"\n            step=\"0.001\"\n            style={{width: 100}}\n            value={this.state.damping}\n            onChange={this.onChangeDamping.bind(this)}\n          />\n        </div>\n        <div className=\"check\">\n          {this.state.d3 ? 'D3' : 'TJ'}\n          <input\n            type=\"checkbox\"\n            checked={this.state.d3}\n            onChange={() => this.setState({d3: !this.state.d3})}\n          />\n        </div>\n        <div className=\"check\">\n          WASM\n          <input\n            type=\"checkbox\"\n            checked={this.state.wasm}\n            onChange={() => this.setState({wasm: !this.state.wasm})}\n          />\n        </div>\n        <div className=\"check\">\n          Elastic\n          <input\n            type=\"checkbox\"\n            checked={this.state.elastic}\n            onChange={this.onToggleElastic.bind(this)}\n          />\n        </div>\n        <div className=\"check\">\n          Gravity\n          <input\n            type=\"checkbox\"\n            checked={this.state.gravity}\n            onChange={this.onToggleGravity.bind(this)}\n          />\n        </div>\n        <div className=\"check\">\n          Collision\n          <input\n            type=\"checkbox\"\n            checked={this.state.collision}\n            onChange={this.onToggleCollision.bind(this)}\n          />\n        </div>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        {this.renderControls()}\n        <div className=\"content\">\n          <div id=\"graph\" />\n          <span>{this.state.fps} fps | {this.state.wasm ? 'wasm' : 'js'}</span>\n        </div>\n      </div>\n    );\n  }\n}\n","export function centerGraph(element) {\n  \n}\n\nexport function dragElement(element) {\n  const pos = [0, 0, 0, 0];\n\n  element.onmousedown = dragMouseDown;\n\n  function dragMouseDown(e) {\n    e = e || window.event;\n    e.preventDefault();\n    if (e.which === 2) {\n      pos[2] = e.clientX;\n      pos[3] = e.clientY;\n      document.onmouseup = closeDragElement;\n      document.onmousemove = elementDrag;\n    }\n  }\n\n  function elementDrag(e) {\n    e = e || window.event;\n    e.preventDefault();\n    if (e.which === 2) {\n      pos[0] = pos[2] - e.clientX;\n      pos[1] = pos[3] - e.clientY;\n      pos[2] = e.clientX;\n      pos[3] = e.clientY;\n      element.style.top = (element.offsetTop - pos[1]) + 'px';\n      element.style.left = (element.offsetLeft - pos[0]) + 'px';\n    }\n  }\n\n  function closeDragElement() {\n    document.onmouseup = null;\n    document.onmousemove = null;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app.js';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}