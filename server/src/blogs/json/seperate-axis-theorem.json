{
  "head": {
    "title": "Seperate Axis Theorem",
    "subtitle": "Collision detection using the SAT algorithm",
    "date": 1572804000,
    "link": "seperate-axis-theorem",
    "image": "image/generic/abstract.jpg",
    "description": "This complicated algorithm doesn't have to be a pain. Explore every detail of how this algorithm is used in 2D games.",
    "tags": [
      "collision", "simulation", "math", "algorithm", "seperate", "axis", "theorem", "detection", "resolution",
      "gravity", "momentum", "javascript", "polygon", "java", "programming", "rust",
      "wasm"
    ]
  },
  "contents": [
    {
      "type": "p",
      "contents": "SHOW ME THE CODE! I usually just want to see the code. I sometimes speak better code than I do English! For those of you that are like that, here is a working implementation on my github."
    },
    {
      "type": "a",
      "props": {
        "target": "tab",
        "href": "https://github.com/jackmead515/2d_game_engine/blob/master/src/main/java/com/engine/jsm/util/GeomUtil.java#L137"
      },
      "contents": "Github Repo: 2d_game_engine"
    },
    {
      "type": "p",
      "contents": "You know what just sucks? Incomplete and uninformative programming articles. There are too many. And it makes me mad."
    },
    {
      "type": "p",
      "contents": "So I'm going to try to explain everything about the Seperate Axis Theorem that I can. I will provide screen shots, example code, links, and whatever else I can find."
    },
    {
      "type": "p",
      "contents": "But, just so you know, so that I don't sound like a hypocrit, I may not complete this article in it's entirety before I publish it. This is simply because I want to save my progress and get the latest content out to you as soon as I can."
    },
    {
      "type": "p",
      "contents": "I'll start off by saying that this is a DETECTION algorithm. It is used to even determine whether or not a collision has even occured. You will still need to resolve it somehow. That could be with elastic collision (See the link below), or just a very basic resolution which I have details in this blog post."
    },
    {
      "type": "a",
      "props": {
        "target": "tab",
        "href": "http://www.speblog.org/blog/elastic-collision"
      },
      "contents": "Elastic Collision Resolution"
    },
    {
      "type": "mini",
      "props": {
        "title": "Dumb Llamas"
      },
      "contents": [
        {
          "type": "image",
          "props": {
            "source": "image/sat_llamas.png"
          }
        }
      ]
    },
    {
      "type": "p",
      "contents": "To start, I will provide you with the links I used to learn the algorithm in the beginning. I do suggest you look at them if you have any questions."
    },
    {
      "type": "a",
      "props": {
        "target": "tab",
        "href": "http://www.dyn4j.org/2010/01/sat/"
      },
      "contents": "Dyn4J Tutorial"
    },
    {
      "type": "a",
      "props": {
        "target": "tab",
        "href": "https://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169"
      },
      "contents": "Tuts-Plus GameDev Tutorial"
    },
    {
      "type": "p",
      "contents": "Okay now that you've looks at the links. Perhaps you have an idea of what's going on. Basically, if you take a perpendicular line to one of the polygons edges and project the minimum and maximum points from each polygon that line, a gap will exist if the two objects are NOT colliding."
    },
    {
      "type": "p",
      "contents": "Now this algorithm can become quite cumbersome to digest. And if you don't do one little thing right, it may completely ruin the algorithm."
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "It all starts with two polygons. To be clear, these two polygons have to be <b>CONVEX</b> polygons with the same predefined <b>WINDING ORDER</b>."
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "A <b>CONVEX</b> polygon is a polygon where no line segments between two points on the boundary ever go outside of the polygon. (Straight from Wiki). Pacman is a great example of a concave polygon. Any triangle, rectangle, hexagon, octagon, (etc.) is a convex polygon."
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "The <b>WINDING ORDER</b> is the way the points of the polygon are described. Usually, a clockwise or counter clockwise pattern. When you throw your points into an array, they have to go one way or the other. I've seen in some game engines where the predefine that all shapes have to be described either CW or CCW. It doesn't matter. You decide!"
    },
    {
      "type": "p",
      "contents": "Now. Lets see some code. In my implementation, I am dealing with simple rectangles. But, this shouldn't matter and should work with any polygon. (Curved surfaces do not work in this! Those require a whole different implementation)."
    },
    {
      "type": "code",
      "props": {
        "source": "public List<double[]> getPoints(double[] rect) {\n\tList<double[]> points = new ArrayList<>(4);\n\tpoints.add(new double[] { rect[0], rect[1] });\n\tpoints.add(new double[] { rect[0], rect[1]+rect[3] });\n\tpoints.add(new double[] { rect[0]+rect[2], rect[1]+rect[3] });\n\tpoints.add(new double[] { rect[0]+rect[2], rect[1] });\n\treturn points;\n}\n\npublic List<double[]> getEdges(double[] rect) {\n\tList<double[]> edges = new ArrayList<>(4);\n\tList<double[]> points = getPoints(rect);\n\tfor (int i = 0; i < points.size(); i++) {\n\t\tdouble[] p1 = points.get(i);\n\t\tdouble[] p2 = points.get(i + 1 == points.size() ? 0 : i + 1);\n\t\tedges.add(VecUtil.subtract(p1, p2));\n\t}\n\treturn edges;\n}\n\n// x, y, width, height\ndouble[] r1 = new double[] { 1, 1, 10, 10 };\ndouble[] r2 = new double[] { 5, 5, 10, 10 };\n\nList<double[]> p1 = getPoints(r1);\nList<double[]> p2 = getPoints(r2);\nList<double[]> e1 = getEdges(r1);\nList<double[]> e2 = getEdges(r2);",
        "language": "java"
      }
    },
    {
      "type": "p",
      "contents": "This code shows the first steps. Step 1 is to get the points and edges of our polygons. In this implementation, I get the points in CCW rotation, and the edges in the same manner. In the images below, you can see how each point would be labeled in the r1 and r2 rectangle arrays, p1 and p2 points arrays, and the e1 and e2 edges array."
    },
    {
      "type": "slideshow",
      "props": {
        "labels": [
          "double[] r1/r2 definition",
          "points on rects",
          "edges on rects"
        ]
      },
      "contents": [
        {
          "type": "image",
          "props": {
            "width": 300,
            "height": 300,
            "source": "image/sat/sat_3.jpg"
          }
        },
        {
          "type": "image",
          "props": {
            "width": 300,
            "height": 300,
            "source": "image/sat/sat_4.jpg"
          }
        },
        {
          "type": "image",
          "props": {
            "width": 300,
            "height": 300,
            "source": "image/sat/sat_5.jpg"
          }
        }
      ]
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "Most everyone understands the points. But what the heck is an edge? And what the heck is this <b>VecUtil.subtract()</b> method doing??"
    },
    {
      "type": "p",
      "contents": "Edges are defined as the difference between two points. Namely, edge 1 is the difference between point 1 and point 2. And seeing as how p1 and p2 are vectors, then it stands that..."
    },
    {
      "type": "code",
      "props": {
        "source": "# edge1 = point1 - point2\ne1 = [p1[0] - p2[0], p1[1] - p2[1]]\n\n# edge2 = point2 - point3\ne2 = [p2[0] - p3[0], p2[1] - p3[1]]\n\n# edge3 = point3 - point4\ne3 = [p3[0] - p4[0], p3[1] - p4[1]]\n\n# edge4 = point4 - point1\ne4 = [p4[0] - p1[0], p4[1] - p1[1]]",
        "language": "python"
      }
    },
    {
      "type": "p",
      "contents": "Going in clockwise direction, you'd have to do the subtraction the other way!"
    },
    {
      "type": "p",
      "contents": "The next steps require a bit more words. In the beginning I stated the general definition of SAT by refering to the case if they are NOT colliding. Well, that's great and all, but we don't care about that. What we care about is if they are colliding, and, by how MUCH they are colliding. This is important if we want to RESOLVE the collision."
    },
    {
      "type": "p",
      "contents": "To do this, we need to loop through every edge on both polygons to get all the nessesary information."
    },
    {
      "type": "code",
      "props": {
        "source": "double minOverlap = Double.POSITIVE_INFINITY;\ndouble[] minAxis = new double[] { 0, 0 };\nfor (double[] edge : edges1) {\n\tdouble[] axis = VecUtil.normalize(VecUtil.normal(edge));\n\tdouble[] mm1 = GeomUtil.project(axis, points1);\n\tdouble[] mm2 = GeomUtil.project(axis, points2);\n\tdouble overlap = Math.max(0, Math.min(mm1[1], mm2[1]) - Math.max(mm1[0], mm2[0]));\n\tif (overlap == 0) {\n\t\treturn null;\n\t} else if (overlap < minOverlap) {\n\t\tminOverlap = overlap;\n\t\tminAxis = axis;\n\t}\n}",
        "language": "java"
      }
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "First what we need to do is find the normal of the edge. The normal is a line perpendicular to the line your testing. Namely, our edge. Getting that data is easy! O(1) time complexity. We call <b>VecUtil.normal(edge)</b> to get it. This method is defined as..."
    },
    {
      "type": "code",
      "props": {
        "source": "public static double[] normal(double[] vector) {\n\treturn new double[] { -vector[1], vector[0] };\n}",
        "language": "java"
      }
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "Now this is only one of the normals. Whattt? Yeah. You can switch the negative around and then have a normal pointing the other direction! Does it matter? Yes. You want to get the normal point <b>AWAY</b> from the polygon, not inward. This all depends on the winding order you used."
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "Next, we have to normalize the normal. Normalizing is a process which involves reducing the numbers down to a range between 0 and 1. To do that, we call <b>VecUtil.normalize(axis)</b>. That is defined as below..."
    },
    {
      "type": "code",
      "props": {
        "source": "public static double[] normalize(double[] vector) {\n\tdouble l = Math.sqrt(Math.pow(vector[0], 2) + Math.pow(vector[1], 2));\n\treturn new double[] { vector[0]/l, vector[1]/l };\n}",
        "language": "java"
      }
    },
    {
      "type": "p",
      "contents": "It's just Pythagoras! Boy I bet he never thought some nerd was going to be using his algorithm in reference to a stupid game... Alright. If your still following along, that's awesome! If not, prehaps I'm not very good at explaining, or, you need to brush up on your math :)"
    },
    {
      "type": "p",
      "contents": "In the next part, we are going to have to project every point from each polygon onto that normal line and find the minimum and maximum value from each set of points. For reference, the image and code show the process."
    },
    {
      "type": "code",
      "props": {
        "source": "public static double[] project(double[] axis, List<double[]> points) {\n\tdouble dot = VecUtil.dot(axis, points.get(0));\n\tdouble min = dot; double max = dot;\n\tfor (double[] point : points) {\n\t\tdot = VecUtil.dot(axis, point);\n\t\tif (dot < min) {\n\t\t\tmin = dot;\n\t\t} else if (dot > max) {\n\t\t\tmax = dot;\n\t\t}\n\t}\n\treturn new double[] { min, max };\n}",
        "language": "java"
      }
    },
    {
      "type": "center",
      "contents": [
        {
          "type": "image",
          "props": {
            "source": "image/sat/sat_6.jpg"
          }
        }
      ]
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "Projecting points means we are going to change the x and y of the point to match what it would be if it were on the line itself. <b>r1-min</b>, <b>r1-max</b>, <b>r2-min</b>, <b>r2-max</b> are what these points are."
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "There is a very simple mathematical tool to do exactly this, and it's O(1) time complexity! The <b>DOT PRODUCT</b>!"
    },
    {
      "type": "p",
      "contents": "To define it, the dot product is the sum of all points in each vector after they have been multiplied together. This produces one number. Here is my simply implementation for vectors..."
    },
    {
      "type": "code",
      "props": {
        "source": "public static double dot(double[] vec1, double[] vec2) {\n\treturn vec1[0]*vec2[0] + vec1[1]*vec2[1];\n}",
        "language": "java"
      }
    },
    {
      "type": "p",
      "contents": "So what we have to do now is simple, loop through all the points, find the smallest and the largest values, then return those ones! EASY PEZY! We do the same thing, projecting the points for both polygons, to get their minimums and maximums."
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "Now this is the finale. We calculate if we have an overlap. The next line <b>Math.max(0, Math.min(mm1[1], mm2[1]) - Math.max(mm1[0], mm2[0]))</b> is just a neat little trick we can do to calculate the overlap without having to write multiple if statements. In plain english, we are testing if the minimum of the maximums subtracted from the maximum of the minimums is greater than 0. (Say that 5 times fast)"
    },
    {
      "type": "p",
      "contents": "If the overlap value is 0, we can guarantee we don't have a collision! So we just return null to imply there is no collision data. If the overlap is not zero, that just means that for that one edge on that one polygon, there was an overlap. However, we need this information! We set the axis and the overlap value to the minOverlap and minAxis values if and only if the overlap is less than the minOverlap. (We want the minimum overlap in order to resolve the collision)."
    },
    {
      "type": "p",
      "contents": "JEEZ! That was tough. If your still following along, dude. You rock. Now, do the ENTIRE process again, just for the edges of polygon 2! (Should just be a copy and paste)."
    },
    {
      "type": "p",
      "contents": "After that's done, and we are at the bottom of the algorith, that means we have not returned from the function, hence, we have a collision. "
    },
    {
      "type": "code",
      "props": {
        "source": "double[] mtv = new double[] { minAxis[0]*minOverlap, minAxis[1]*minOverlap };\ndouble[] c1c2 = VecUtil.subtract(GeomUtil.center(rect1), GeomUtil.center(rect2));\nif (VecUtil.dot(minAxis, c1c2) < 0) {\n\treturn VecUtil.invert(mtv);\n} else {\n\treturn mtv;\n}",
        "language": "java"
      }
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "The <b>mtv</b> variable is refering to the Minimum Translation Vector. This is basically the minimum amount of distance both polygons have to move to resolve their collision. This is calculated with the <b>minAxis</b> and <b>minOverlap</b> variables we saved above."
    },
    {
      "type": "p",
      "contents": "Now what are the next lines for? Well, this is only to ensure that the vector we return is pointing from polygon 2 to ploygon 1. Meaning, it's pointing away from polygon 2! We want to do this in order to move the polygons correctly."
    },
    {
      "type": "p",
      "contents": "We subtract the center of rect1 from rect2 (this also works if they are polygons) and consider the dot product of the minAxis and the center vector. If it is less than 0, it's pointing the wrong direction. We want to be pointing towards polygon 1. So we just invert the values. This requires us to simply flip the negative sign of each value (if it's positive, make it negative and vise versa)."
    },
    {
      "type": "p",
      "contents": "And we are done! Just about. But great job for sticking it out! To update the collision, simply add the MTV to the current position of polygon 1. Then, subtract the MTV from the current position of polygon 2. And your completely DONE!"
    },
    {
      "type": "p",
      "contents": "Just below is a great visualizer that I ported to a React component. You can view the full app at the link too! Enjoy!"
    },
    {
      "type": "a",
      "props": {
        "target": "tab",
        "href": "/plugin/sat-tester"
      },
      "contents": "Fullscreen Collision Tester"
    },
    {
      "type": "plugin",
      "props": {
        "source": "plugin/sat-tester",
        "id": "sat-tester",
        "width": "100%",
        "height": "300"
      }
    }
  ]
}