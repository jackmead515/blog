{
  "head": {
    "title": "Sinon Stubbing the Amazon SDK",
    "subtitle": "Explore how to stub Amazon's javascript library with sinon and mocha",
    "date": 1577488733,
    "link": "sinon-stubbing-amazon-javascript-sdk-sinon-mocha",
    "description": "Using Sinon, a powerful tool used when testing your applications, we can stub out the Amazon Web Services javascript library. Explore how to properly test the AWS SDK package.",
    "image": "image/generic/code.jpg",
    "tags": [
      "javascript", "node", "sinon", "mocha", "testing", "aws", "proxyquire", "dynamo", "programming"
    ]
  },
  "contents": [
    {
      "type": "p",
      "contents": "In this tutorial, I'll show you how to stub out Amazon's Javascript SDK using the popular sinon package."
    },
    {
      "type": "p",
      "contents": "As usual, it is polite and correct that I provide further documentation to all the packages, libaries, and examples that I use to help you in your conquest of testing!"
    },
    {
      "type": "a",
      "props": {
        "target": "tab",
        "href": "https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/index.html"
      },
      "contents": "Amazon Javascript SDK API Reference"
    },
    {
      "type": "a",
      "props": {
        "target": "tab",
        "href": "https://sinonjs.org/"
      },
      "contents": "Sinon Home Page"
    },
    {
      "type": "a",
      "props": {
        "target": "tab",
        "href": "https://github.com/jackmead515/mocha-testing-ground/blob/master/aws-sdk/dynamo.spec.js"
      },
      "contents": "Full Working Example"
    },
    {
      "type": "p",
      "contents": "We are going to build a small application that uses the Dynamo Document Client to inject random numbers into a Dynamo table. What is shown is the meat of the application"
    },
    {
      "type": "code",
      "props": {
        "language": "javascript",
        "source": "const AWS = require('aws-sdk');\n\nconst client = new AWS.DynamoDB.DocumentClient({\n\tapiVersion: '2012-08-10',\n\tregion: 'us-east-1'\n});\nclient.batchWrite(params, (err, data) => {\n\tif (err) {\n\t\tthrow err;\n\t}\n\n\treturn data;\n});"
      }
    },
    {
      "type": "p",
      "contents": "To test this file, we will be using the mocha framework. Mocha is a free and open sourced testing framework that uses global function declarations to describe how your test is being conducted. It makes it painless (if you know the keywords!). Please refer to the documentation if you are unfamiliar with it."
    },
    {
      "type": "p",
      "contents": "To start, lets install all the nessesary dependencies using npm. These dependencies will include the AWS SDK and all testing tools."
    },
    {
      "type": "code",
      "props": {
        "language": "shell",
        "source": "npm install aws-sdk --save\nnpm install mocha chance proxyquire sinon --save-dev"
      }
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "In our package.json file, we also need to add the following script so we can run our tests with <b>npm run test</b>"
    },
    {
      "type": "code",
      "props": {
        "language": "shell",
        "source": "mocha ./**/*spec.js --recursive"
      }
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "<b>proxyquire</b> is a package that allows us to load a file while stubbing out it's imports dynamically. I prefer this method as it treats local file importants and node module imports the same making stubbing very straight forward."
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "<b>chance</b> is another popular package used for randomly generating values. It can generate anything from strings and numbers to dates and names. You can absolutely just use <b>Math.random()</b> for all your stubbed generations, but, this library gives us a bit more flexiblity."
    },
    {
      "type": "p",
      "contents": "But lets get to sinon, as it the main focus of this tutorial. When stubbing with sinon, we would like to test that every part of the library is being called without actually calling the library itself. If we'd like to test exactly what the SDK is doing, that would require an integration test. That will be another tutorial..."
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "Step one, lets create a file <b>index.spec.js</b> and setup a basic mocha framework."
    },
    {
      "type": "code",
      "props": {
        "language": "javascript",
        "source": "const sinon = require('sinon');\nconst assert = require('assert');\nconst Chance = require('chance');\nconst proxyquire = require('proxyquire');\n\nconst chance = Chance();\n\ndescribe('Index Test Suite', () => {\n\tbefore(() => {\n\n\t});\n\n\tit('should write random data!', async () => {\n\n\t});\n});"
      }
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "The <b>describe</b> block should be used once per file (this is just a preference to split up tests). It 'describes' the tests imbeded inside of it. It also helps when running in the terminal as mocha will pretty print describe blocks making it easy to read."
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "The <b>before</b> block will run directly before the <b>it</b> block (where we actually make assertions). We will use it to setup our sinon stubs and proxyquire."
    },
    {
      "type": "p",
      "contents": "Moving on to the before block, let's setup our stubs with sinon and proxyquire."
    },
    {
      "type": "code",
      "props": {
        "language": "javascript",
        "source": "let mut;\nlet clientStub;\n\nbefore(() => {\n\tclientStub = {\n\t\tbatchWrite: sinon.stub()\n\t}\n\n\tconst awsStub = {\n\t\tDynamoDB: {\n\t\t\tDocumentClient: class {\n\t\t\t\tconstructor() {\n\t\t\t\t\treturn clientStub;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tmut = proxyquire('./dynamo.js', {\n\t\t'aws-sdk': awsStub\n\t});\n});"
      }
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "The sinon stub is pretty straight forward. In the end, I only really care about the <b>batchWrite</b> function in the document client class. This is the method I need to test whether or not it was called with the right parameters."
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "The next most important step is when we <b>proxyquire</b> the file we want to test. The library takes two arguments, the relative path to the file to load, and an object describing the imports of that file."
    },
    {
      "type": "p",
      "contents": "This is simple enough, but, we also need to make sure our test uses the proxyquire object and not the library itself. You'd be surprised how many times I've seen people use a proxyquire and then call the library directly. Let's look at the it block."
    },
    {
      "type": "code",
      "props": {
        "language": "javascript",
        "source": "it('should write random data!', async () => {\n\tconst expectedData = chance.string();\n\n\tclientStub.batchWrite.yields(null, expectedData);\n\n\tconst data = await mut.run();\n\n\tsinon.assert.callCount(clientStub.batchWrite, 1);\n\tassert.strictEqual(data, expectedData);\n});"
      }
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "First, we create random data that we expect aws to return. This really can be anything you want. So I just use a random string. Then we make a statement on the clientStub."
    },
    {
      "type": "code",
      "props": {
        "language": "javascript",
        "source": "clientStub.batchWrite.yields(null, expectedData);"
      }
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "The yields function will call any callbacks on the stub and force them to return the provided parameters. So the first argument of the callback will be <b>null</b> and the second will be our <b>expectedData</b>!"
    },
    {
      "type": "p",
      "props": {
        "embed": true
      },
      "contents": "For the last steps, we use the <b>mut</b> object to call our run method and then make assertions based on what we expect and require our application to do."
    },
    {
      "type": "p",
      "contents": "Our output from mocha should look like the following."
    },
    {
      "type": "code",
      "props": {
        "language": "javascript",
        "source": "Test Suite\n\tâœ“ should write random data!\n\n1 passing (501ms)"
      }
    },
    {
      "type": "p",
      "contents": "Hopefully this has been a basic introduction to sinon, mocha, and proxyquire. Feel free to leave a comment if you'd like to see more from this blog. I'd be happy to update it!"
    }
  ]
}